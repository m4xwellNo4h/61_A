;;;1
;Two ways to change the ways in which the coins are tried is 1. to swap the two prcedures that are added together to compute the number of ways possible to make combinations. 2. To re-arrange te order of the kinds-of-coins in the first-denomination procedure. Rearranging this changes the way that the procedure evalutes the number of total combinations that it evaluates. 


;;;2

(define (count-change amount)
  (cc amount 2))

(define (cc amount kinds-of-coins)
  (cond ((= amount 0) 1)
	(( or (< amount 0) (= kinds-of-coins 0)) 0)
	(else (+ (cc amount
		     (- kinds-of-coins 1))
		 (cc (- amount
			(first-denomination kinds-of-coins))
		     kinds-of-coins)))))

(define (first-denomination kinds-of-coins)
  (cond ((= kinds-of-coins 1) 5)
	((= kinds-of-coins 2) 1)))
	


(define (first-denomination kinds-of-coins)
  (cond ((= kinds-of-coins 1) 1)
	((= kinds-of-coins 2) 5)))

;;;

(define (count-change amount)
  (cc amount 2))

(define (cc amount kinds-of-coins)
  (cond ((= amount 0) 1)
	(( or (< amount 0) (= kinds-of-coins 0)) 0)
	(else (+ (cc (- amount
			(first-denomination kinds-of-coins))
		     kinds-of-coins)
		 (cc amount (- kinds-of-coins 1)) ))))

(define (first-denomination kinds-of-coins)
  (cond ((= kinds-of-coins 1) 1)
	((= kinds-of-coins 2) 5)))

(define (fib n)
  (fib-iter 1 0 n))

(define (fib-iter a b count)
  (if (= count 0)
      b
      (fib-iter (+ a b) a (- count 1))))

;;;3

(define (count-change amount)
  (cc amount â€™(50 25 10 5 1)) )


(define (first-denomination kinds-of-coins)
  (cond ((= kinds-of-coins 1) 1)
	((= kinds-of-coins 2) 5)
	((= kinds-of-coins 3) 10)
	((= kinds-of-coins 4) 25)
	((= kinds-of-coins 5) 50)))

(define (cc amount kinds-of-coins)
  (cond ((= amount 0) 1)
	((or (< amount 0) (= kinds-of-coins 0)) 0)
	(else (+ (cc amount
		     (- kinds-of-coins 1))
		 (cc (- amount
			(first-denomination kinds-of-coins))
		     kinds-of-coins)))))

(define (count-change amount)
  (cc amount 5))
(define (count-change amount)
  (cc amount 2))

(define (cc amount kinds-of-coins)
  (cond ((= amount 0) 1)
	(( or (< amount 0) (= kinds-of-coins 0)) 0)
	(else (+ (cc amount
		     (- kinds-of-coins 1))
		 (cc (- amount
			(first-denomination kinds-of-coins))
		     kinds-of-coins)))))

(define (first-denomination kinds-of-coins)
  (cond ((= kinds-of-coins 1) 5)
	((= kinds-of-coins 2) 1)))
