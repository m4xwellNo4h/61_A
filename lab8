;Lab 8;

;Exercise 1;

(define (make-account init-amount) 
  (let ((balance init-amount) ) 
    (define (withdraw amount) 
      (set! balance (- balance amount)) balance) 
    (define (deposit amount) 
      (set! balance (+ balance amount)) balance) 
    (define (dispatch msg) 
      (cond 
        ((eq? msg 'withdraw) withdraw) 
        ((eq? msg 'deposit) deposit) ) ) 
    dispatch) ) 

;Exercise 2;

(define (make-account balance) 
  (define init-balance balance)
  (define (withdraw amount) 
    (set! balance (- balance amount)) balance) 
  (define (deposit amount) 
    (set! balance (+ balance amount)) balance) 
  (define (dispatch msg) 
    (cond 
      ((eq? msg 'withdraw) withdraw) 
      ((eq? msg 'deposit) deposit)
((eq? msg 'init-balance) init-balance)
((eq? msg 'balance) balance)
 ) ) 
  dispatch) 

;Exercise 3;

(define (make-account balance)
  (define trans '())
  (define init-balance balance)
  (define (withdraw amount) 
    (set! trans (cons (list 'withdraw amount) trans))
    (set! balance (- balance amount)) balance) 
  (define (deposit amount) 
    (set! trans (cons (list 'deposit amount) trans))
    (set! balance (+ balance amount)) balance) 
  (define (dispatch msg) 
    (cond 
      ((eq? msg 'withdraw) withdraw) 
      ((eq? msg 'deposit) deposit)
      ((eq? msg 'init-balance) init-balance)
      ((eq? msg 'balance) balance)
      ((eq? msg 'transactions) trans)
 ) ) 
  dispatch) 

; Exercise 4;

(define (plus1 var) 
  (set! var (+ var 1)) 
  var)

; Substitution model in this case would try to substitue the value of the number 5 for var as if it were performing an operation in functional programming. Thatwould cause an error because it would be setting the value of five equal to the value of 6.
;What Scheme actually does is stores the value of 5 as a local variable when (plus1 5) is called and then is uses that value when executing the fucntion to ultimately take one and add it to the value given which in this case is five. The result is six.

; Exercise 6;

;3.3;

(define (make-account balance password)
  (define trans '())
  (define init-balance balance)
  (define (withdraw amount) 
    (set! trans (cons (list 'withdraw amount) trans))
    (set! balance (- balance amount)) balance) 
  (define (deposit amount) 
    (set! trans (cons (list 'deposit amount) trans))
    (set! balance (+ balance amount)) balance) 
  (define (dispatch pass msg) 
    (begin (cond 
      ((and (eq? msg 'withdraw) (eq? pass password)) withdraw) 
      ((and (eq? msg 'deposit) (eq? pass password)) deposit)
      ((and (eq? msg 'init-balance) (eq? pass password)) init-balance)
      ((and (eq? msg 'balance) (eq? pass password)) balance)
      ((and (eq? msg 'transactions) (eq? pass password)) trans))
   (print "Hot damn. Wrong!"))) 
  dispatch)  

;Function works with correct password and prints message with incorrect password, but the function also prints an error message with the incorrect password. 

;3.4;


(define (make-account balance password)
  (define trys 0)
  (define trans '())
  (define init-balance balance)
  (define (withdraw amount) 
    (set! trans (cons (list 'withdraw amount) trans))
    (set! balance (- balance amount)) balance) 
  (define (deposit amount) 
    (set! trans (cons (list 'deposit amount) trans))
    (set! balance (+ balance amount)) balance) 
  (define (dispatch pass msg)
     (cond 
      ((equal? attempts 7) (call-the-cops))
      ((and (eq? msg 'withdraw) (eq? pass password)) withdraw) 
      ((and (eq? msg 'deposit) (eq? pass password)) deposit)
      ((and (eq? msg 'init-balance) (eq? pass password)) init-balance)
      ((and (eq? msg 'balance) (eq? pass password)) balance)
      ((and (eq? msg 'transactions) (eq? pass password)) trans)
   (else (print "Hot damn. Wrong!") (begin (set! attempts (+ attempts 1))))
  dispatch) )) 

;3.7;

(define (make-account balance password)
  (define trys 0)
  (define trans '())
  (define init-balance balance)
  (define (withdraw amount) 
    (set! trans (cons (list 'withdraw amount) trans))
    (set! balance (- balance amount)) balance) 
  (define (deposit amount) 
    (set! trans (cons (list 'deposit amount) trans))
    (set! balance (+ balance amount)) balance) 
  (define (dispatch pass msg)
     (cond 
      ((equal? attempts 7) (call-the-cops))
      ((and (eq? msg 'withdraw) (eq? pass password)) withdraw) 
      ((and (eq? msg 'deposit) (eq? pass password)) deposit)
      ((and (eq? msg 'init-balance) (eq? pass password)) init-balance)
      ((and (eq? msg 'balance) (eq? pass password)) balance)
      ((and (eq? msg 'transactions) (eq? pass password)) trans)
   (else (print "Hot damn. Wrong!") (begin (set! attempts (+ attempts 1))))
  dispatch) )

(define (make-joint account old-pass new-pass)
  ((acount old-pass 'make-joint) new-pass))

;3.8;

 (define a 
   (let ((init (- 1))) 
     (lambda (x) (if (= init (- 1)) 
                   (set! init x) 
                   0))))
;3.10
;Because let is equivalent to lambda, another environment is created – in which balance is defined. Now the first object has two “private” variables – balance and initial-amount, and both can be changed separately from one another.


;3.11
; The two individual accounts keep the local states distinct by enforcing the use of different environments.  
